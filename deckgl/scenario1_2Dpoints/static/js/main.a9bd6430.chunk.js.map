{"version":3,"sources":["App.js","index.js"],"names":["gui","dat","settings","numOfPoints","showBuildings","guiNumOfPoints","add","name","listen","guiBuildings","INITIAL_VIEW_STATE","longitude","latitude","zoom","DATA_URLS","getPointUrls","number","point_urls","getShpUrl","showBuilding","shp_url","colorScale","chroma","scale","domain","heightColorScale","App","state","mapStyle","jsonData","shpData","_loadPoints","_loadData","then","data","setState","_loadBuildings","_loadShpData","a","length","load","ShapefileLoader","promisedData","forEach","url","push","Promise","resolve","reject","JSONLoader","all","values","flat","onChange","value","this","destroy","layers","GeoJsonLayer","id","pickable","filled","extruded","getFillColor","d","Math","random","rgb","getElevation","elevationScale","stroked","pointType","lineWidthScale","lineWidthMinPixels","elevationValue","properties","vel_avg","getPointRadius","initialViewState","controller","mapboxApiAccessToken","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9bd6430.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport {GeoJsonLayer} from \"@deck.gl/layers\";\r\nimport {StaticMap} from \"react-map-gl\";\r\nimport {ShapefileLoader} from \"@loaders.gl/shapefile\";\r\nimport {JSONLoader} from \"@loaders.gl/json\";\r\nimport chroma from \"chroma-js\";\r\nimport {load} from \"@loaders.gl/core\";\r\nimport * as dat from 'dat.gui'\r\n\r\n\r\n// ---- GUI definition - start\r\nconst gui = new dat.GUI();\r\nconst settings = {\r\n    numOfPoints: \"900 000\",\r\n    showBuildings: false\r\n}\r\nlet guiNumOfPoints = gui.add(settings, 'numOfPoints', ['40 000', '400 000', '900 000', '1 700 000']).name('Number of points').listen();\r\nlet guiBuildings = gui.add(settings, 'showBuildings').name('Show buildings').listen()\r\n\r\n// ---- GUI definition - end\r\n\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude: 120.81321,\r\n    latitude: 14.7569,\r\n    zoom: 10,\r\n};\r\n\r\nconst MAPBOX_ACCESS_TOKEN =\r\n    \"pk.eyJ1IjoibWFyaWRhbmkiLCJhIjoiSGF2TGdwZyJ9.B0N8ybRGG38wmRK_VfxPoA\";\r\n\r\nconst DATA_URLS = {\r\n    \"los32\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/los/32.json\",\r\n    \"los142\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/los/142.json\",\r\n    \"los142Decimated\": \"../../../data/interferometry/los/142_decimated.json\",\r\n    \"vertg32\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/vertg/32.json\",\r\n    \"vertg142\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/vertg/142.json\",\r\n    \"buildings\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/buildings/manila_buildings_larger_than_250.shp\"\r\n}\r\n\r\nconst getPointUrls = (number) => {\r\n    switch (number) {\r\n        case \"40 000\":\r\n            point_urls = [DATA_URLS.los142Decimated]\r\n            break;\r\n        case \"400 000\":\r\n            point_urls = [DATA_URLS.los142]\r\n            break;\r\n        case \"900 000\":\r\n            point_urls = [DATA_URLS.los32, DATA_URLS.los142]\r\n            break;\r\n        case \"1 700 000\":\r\n            point_urls = [DATA_URLS.los32, DATA_URLS.los142, DATA_URLS.vertg32, DATA_URLS.vertg142]\r\n            break;\r\n        default:\r\n            point_urls = [DATA_URLS.los142]\r\n    }\r\n}\r\n\r\nconst getShpUrl = (showBuilding) => {\r\n    if (showBuilding) shp_url = DATA_URLS.buildings\r\n    else shp_url = \"\"\r\n}\r\n\r\nlet point_urls = [];\r\nlet shp_url = [];\r\n\r\ngetShpUrl(settings.showBuildings)\r\ngetPointUrls(settings.numOfPoints)\r\n\r\nlet colorScale = chroma\r\n    .scale([\"#fda34b\", \"#ff7882\", \"#c8699e\", \"#7046aa\", \"#0c1db8\", \"#2eaaac\"])\r\n    .domain([-30, 10]);\r\n\r\nlet heightColorScale = chroma\r\n    .scale([\"#A0FAB4\", \"#88CA97\", \"#6E9B78\", \"#536E59\"])\r\n    .domain([0, 20]);\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        mapStyle: 'mapbox://styles/mapbox/satellite-v9',\r\n        jsonData: [],\r\n        shpData: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        guiNumOfPoints.onChange(value => {\r\n            this.setState({jsonData: []});\r\n            getPointUrls(value)\r\n            this._loadPoints()\r\n        })\r\n\r\n        guiBuildings.onChange(showBuildings => {\r\n            this.setState({shpData: []})\r\n            getShpUrl(showBuildings)\r\n            this._loadBuildings()\r\n        })\r\n\r\n        this._loadPoints()\r\n\r\n        if (settings.showBuildings) {\r\n            this._loadBuildings()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        gui.destroy()\r\n    }\r\n\r\n    _loadPoints = () => {\r\n        this._loadData().then((data) => {\r\n            this.setState({jsonData: data});\r\n        });\r\n    }\r\n\r\n    _loadBuildings = () => {\r\n        this._loadShpData().then((shpData) => {\r\n            this.setState({shpData});\r\n        });\r\n    }\r\n\r\n    _loadShpData = async () => {\r\n        if (shp_url.length > 0) {\r\n            let promisedData = await load(shp_url, ShapefileLoader);\r\n            return promisedData.data;\r\n        } else return []\r\n\r\n    };\r\n\r\n    _loadData = async () => {\r\n        let promisedData = [];\r\n        point_urls.forEach((url) =>\r\n            promisedData.push(\r\n                new Promise((resolve, reject) => resolve(load(url, JSONLoader)))\r\n            )\r\n        );\r\n        return Promise.all(promisedData).then((values) => values.flat());\r\n    };\r\n\r\n    render() {\r\n        let layers = [];\r\n\r\n\r\n        if (this.state.shpData.length > 0) {\r\n            if (settings.showBuildings) {\r\n                layers.push(\r\n                    new GeoJsonLayer({\r\n                        id: \"buildings-geojson-layer\",\r\n                        data: this.state.shpData,\r\n                        pickable: false,\r\n                        filled: true,\r\n                        extruded: true,\r\n                        getFillColor: (d) => [\r\n                            ...heightColorScale(Math.random() * 20).rgb(),\r\n                            255,\r\n                        ],\r\n                        getElevation: (d) => Math.random() * 20,\r\n                        elevationScale: 3,\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n        if (this.state.jsonData.length > 0) {\r\n            layers.push(\r\n                new GeoJsonLayer({\r\n                    id: \"points-geojson-layer\",\r\n                    data: this.state.jsonData,\r\n                    pickable: true,\r\n                    stroked: false,\r\n                    filled: true,\r\n                    extruded: true,\r\n                    pointType: \"circle\",\r\n                    lineWidthScale: 20,\r\n                    lineWidthMinPixels: 2,\r\n                    elevationValue: (d) => Math.random() * 100,\r\n                    getFillColor: (d) => [\r\n                        ...colorScale(d.properties.vel_avg).rgb(),\r\n                        255,\r\n                    ],\r\n                    getPointRadius: 20,\r\n                })\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <DeckGL\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                    layers={layers}\r\n                >\r\n                    <StaticMap\r\n                        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                            mapStyle={this.state.mapStyle}\r\n                    />\r\n                </DeckGL>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}