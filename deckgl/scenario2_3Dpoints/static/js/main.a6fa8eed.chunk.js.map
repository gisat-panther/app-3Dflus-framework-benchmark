{"version":3,"sources":["App.js","index.js"],"names":["gui","dat","settings","numOfPoints","guiNumOfPoints","add","name","listen","INITIAL_VIEW_STATE","longitude","latitude","zoom","MAPBOX_ACCESS_TOKEN","DATA_URLS","getPointUrls","number","point_urls","colorScale","chroma","scale","domain","App","state","mapStyle","jsonData","_loadPoints","_loadData","then","data","setState","a","promisedData","forEach","url","push","Promise","resolve","reject","load","JSONLoader","all","values","flat","onChange","value","this","destroy","layers","length","PointCloudLayer","id","pickable","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","pointSize","getPosition","d","geometry","coordinates","properties","h_cop30m","getColor","vel_avg","rgb","initialViewState","controller","mapboxApiAccessToken","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+YAaMA,EAAM,IAAIC,IACVC,EAAW,CACbC,YAAa,WAGbC,EAAiBJ,EAAIK,IAAIH,EAAU,cAAe,CAAC,UAAW,UAAW,cAAcI,KAAK,oBAAoBC,SAI9GC,EAAqB,CACvBC,UAAW,UACXC,SAAU,QACVC,KAAM,IAIJC,EACF,qEAMEC,GAHa,qFAAiFD,GAIvF,4FADPC,EAEQ,4FAFRA,EAGS,6FAHTA,EAIU,8FAGVC,EAAe,SAACC,GAClB,OAAQA,GACJ,IAAK,UACDC,EAAa,CAACH,GACd,MACJ,IAAK,UACDG,EAAa,CAACH,EAAiBA,GAC/B,MACJ,IAAK,YACDG,EAAa,CAACH,EAAiBA,EAAkBA,EAAmBA,GACpE,MACJ,QACIG,EAAa,CAACH,KAItBG,EAAa,GAEjBF,EAAaZ,EAASC,aAEtB,IAAIc,EAAaC,IACZC,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,YAC9DC,OAAO,EAAE,GAAI,KAEGC,E,4MACjBC,MAAQ,CACJC,SAAU,sCACVC,SAAU,I,EAgBdC,YAAc,WACV,EAAKC,YAAYC,MAAK,SAACC,GACnB,EAAKC,SAAS,CAACL,SAAUI,Q,EAIjCF,U,sBAAY,4BAAAI,EAAA,6DACJC,EAAe,GACnBf,EAAWgB,SAAQ,SAACC,GAAD,OACfF,EAAaG,KACT,IAAIC,SAAQ,SAACC,EAASC,GAAV,OAAqBD,EAAQE,YAAKL,EAAKM,aAJnD,kBAODJ,QAAQK,IAAIT,GAAcJ,MAAK,SAACc,GAAD,OAAYA,EAAOC,WAPjD,2C,uDAnBZ,WAAqB,IAAD,OAChBtC,EAAeuC,UAAS,SAAAC,GACpB,EAAKf,SAAS,CAACL,SAAU,KACzBV,EAAa8B,GACb,EAAKnB,iBAEToB,KAAKpB,gB,kCAGT,WACIzB,EAAI8C,Y,oBAmBR,WACI,IAAIC,EAAS,GAkCb,OAhCIF,KAAKvB,MAAME,SAASwB,OAAS,GAC7BD,EAAOb,KACH,IAAIe,IAAgB,CAChBC,GAAI,oBACJtB,KAAMiB,KAAKvB,MAAME,SACjB2B,UAAU,EACVC,iBAAkBC,IAAkBC,OACpCC,UAAW,EACXC,YAAa,SAACC,GAAD,4BACNA,EAAEC,SAASC,aADL,CAET,GAA6B,GAAxBF,EAAEG,WAAWC,YAEtBC,SAAU,SAACL,GAAD,OAAOxC,EAAWwC,EAAEG,WAAWG,SAASC,UAqB1D,8BACI,cAAC,IAAD,CACIC,iBAAkBzD,EAClB0D,YAAY,EACZnB,OAAQA,EAHZ,SAKI,cAAC,IAAD,CACIoB,qBAAsBvD,EACtBW,SAAUsB,KAAKvB,MAAMC,mB,GA/EZ6C,aC/DjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a6fa8eed.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport {PointCloudLayer} from \"@deck.gl/layers\";\r\nimport {StaticMap} from \"react-map-gl\";\r\nimport {JSONLoader} from \"@loaders.gl/json\";\r\nimport chroma from \"chroma-js\";\r\nimport {load} from \"@loaders.gl/core\";\r\nimport {COORDINATE_SYSTEM} from \"@deck.gl/core\";\r\nimport * as dat from 'dat.gui'\r\nimport {TerrainLayer} from '@deck.gl/geo-layers';\r\n\r\n\r\n// ---- GUI definition - start\r\nconst gui = new dat.GUI();\r\nconst settings = {\r\n    numOfPoints: \"400 000\"\r\n}\r\n// let guiNumOfPoints = gui.add(settings, 'numOfPoints', ['40 000', '400 000', '900 000', '1 700 000']).name('Number of points').listen();\r\nlet guiNumOfPoints = gui.add(settings, 'numOfPoints', ['400 000', '900 000', '1 700 000']).name('Number of points').listen();\r\n\r\n// ---- GUI definition - end\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude: 120.81321,\r\n    latitude: 14.7569,\r\n    zoom: 10,\r\n};\r\n\r\n\r\nconst MAPBOX_ACCESS_TOKEN =\r\n    \"pk.eyJ1IjoibWFyaWRhbmkiLCJhIjoiSGF2TGdwZyJ9.B0N8ybRGG38wmRK_VfxPoA\";\r\n\r\n// const TERRAIN_IMAGE = `https://api.mapbox.com/v4/mapbox.terrain-rgb/{z}/{x}/{y}.png?access_token=${MAPBOX_ACCESS_TOKEN}`;\r\nconst SURFACE_IMAGE = `https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?access_token=${MAPBOX_ACCESS_TOKEN}`;\r\nconst EXAGG = 100;\r\n\r\nconst DATA_URLS = {\r\n    \"los32\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/los/32.json\",\r\n    \"los142\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/los/142.json\",\r\n    \"vertg32\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/vertg/32.json\",\r\n    \"vertg142\": \"https://ptr.gisat.cz/ftpstorage/applications/3dflus/test_data/interferometry/vertg/142.json\",\r\n}\r\n\r\nconst getPointUrls = (number) => {\r\n    switch (number) {\r\n        case \"400 000\":\r\n            point_urls = [DATA_URLS.los142]\r\n            break;\r\n        case \"900 000\":\r\n            point_urls = [DATA_URLS.los32, DATA_URLS.los142]\r\n            break;\r\n        case \"1 700 000\":\r\n            point_urls = [DATA_URLS.los32, DATA_URLS.los142, DATA_URLS.vertg32, DATA_URLS.vertg142]\r\n            break;\r\n        default:\r\n            point_urls = [DATA_URLS.los142]\r\n    }\r\n}\r\n\r\nlet point_urls = [];\r\n\r\ngetPointUrls(settings.numOfPoints)\r\n\r\nlet colorScale = chroma\r\n    .scale([\"#fda34b\", \"#ff7882\", \"#c8699e\", \"#7046aa\", \"#0c1db8\", \"#2eaaac\"])\r\n    .domain([-30, 10]);\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        mapStyle: 'mapbox://styles/mapbox/satellite-v9',\r\n        jsonData: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        guiNumOfPoints.onChange(value => {\r\n            this.setState({jsonData: []});\r\n            getPointUrls(value)\r\n            this._loadPoints()\r\n        })\r\n        this._loadPoints()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        gui.destroy()\r\n    }\r\n\r\n    _loadPoints = () => {\r\n        this._loadData().then((data) => {\r\n            this.setState({jsonData: data});\r\n        });\r\n    }\r\n\r\n    _loadData = async () => {\r\n        let promisedData = [];\r\n        point_urls.forEach((url) =>\r\n            promisedData.push(\r\n                new Promise((resolve, reject) => resolve(load(url, JSONLoader)))\r\n            )\r\n        );\r\n        return Promise.all(promisedData).then((values) => values.flat());\r\n    };\r\n\r\n    render() {\r\n        let layers = [];\r\n\r\n        if (this.state.jsonData.length > 0) {\r\n            layers.push(\r\n                new PointCloudLayer({\r\n                    id: \"point-cloud-layer\",\r\n                    data: this.state.jsonData,\r\n                    pickable: false,\r\n                    coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\r\n                    pointSize: 2,\r\n                    getPosition: (d) => [\r\n                        ...d.geometry.coordinates,\r\n                        10 + d.properties.h_cop30m * 75,\r\n                    ],\r\n                    getColor: (d) => colorScale(d.properties.vel_avg).rgb(),\r\n                })\r\n            );\r\n\r\n            // layers.push(\r\n            //     new TerrainLayer({\r\n            //         //https://github.com/tilezen/joerd/blob/master/docs/formats.md\r\n            //         elevationDecoder: {\r\n            //             rScaler: 256*EXAGG,\r\n            //             gScaler: EXAGG,\r\n            //             bScaler: 1/256/EXAGG,\r\n            //             offset: -32768*EXAGG\r\n            //         },\r\n            //         // texture: SURFACE_IMAGE,\r\n            //         elevationData: './data/Copernicus_DSM_10_merged_height-image_1000.png',\r\n            //         bounds: [119.99986111111112, 13.999861111111109, 122.0001388888889, 16.000138888888888],\r\n            //     })\r\n            // )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <DeckGL\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                    layers={layers}\r\n                >\r\n                    <StaticMap\r\n                        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                        mapStyle={this.state.mapStyle}/>\r\n                </DeckGL>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}