{"version":3,"sources":["../node_modules/geotiff/src/predictor.js","../node_modules/geotiff/src/compression/basedecoder.js","../node_modules/geotiff/src/compression/jpeg.js"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","applyPredictor","block","predictor","width","height","bitsPerSample","planarConfiguration","Error","byteLength","Uint8Array","Uint16Array","Uint32Array","BaseDecoder","fileDirectory","buffer","a","this","decodeBlock","decoded","Predictor","isTiled","StripOffsets","tileWidth","TileWidth","ImageWidth","tileHeight","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration","dctZigZag","Int32Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","values","k","code","push","children","q","p","j","pop","decodeScan","data","initialOffset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","mcusPerLine","progressive","startOffset","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","bit","node","receive","initialLength","n","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","component","decodeFunction","mcu","col","mcuCol","blockRow","v","blockCol","h","blocks","blocksPerLine","decodeFn","componentsLength","zz","t","huffmanTableDC","diff","pred","e","rs","huffmanTableAC","s","r","z","direction","marker","mcuExpected","blocksPerColumn","mcusPerColumn","usedResetInterval","buildComponentData","lines","samplesPerLine","R","quantizeAndInverse","dataOut","dataIn","v0","v1","v2","v3","v4","v5","v6","v7","qt","quantizationTable","sample","scanLine","line","JpegStreamReader","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","resetFrames","frames","readUint16","value","readDataBlock","array","subarray","prepareComponents","componentId","maxH","maxV","hasOwnProperty","Math","ceil","scanLines","blocksPerLineForMcu","blocksPerColumnForMcu","fileMarker","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","precision","componentsOrder","componentsCount","qId","quantizationIdx","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","tableSpec","successiveApproximation","processed","console","warn","cp","Object","keys","outComponents","scaleX","scaleY","out","oi","y","x","JpegDecoder","reader","JPEGTables","parse","getResult"],"mappings":"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","file":"static/js/4.22c5a0c8.chunk.js","sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","import BaseDecoder from './basedecoder';\n\n/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n   Copyright 2011 notmasteryet\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nconst dctZigZag = new Int32Array([\n  0,\n  1, 8,\n  16, 9, 2,\n  3, 10, 17, 24,\n  32, 25, 18, 11, 4,\n  5, 12, 19, 26, 33, 40,\n  48, 41, 34, 27, 20, 13, 6,\n  7, 14, 21, 28, 35, 42, 49, 56,\n  57, 50, 43, 36, 29, 22, 15,\n  23, 30, 37, 44, 51, 58,\n  59, 52, 45, 38, 31,\n  39, 46, 53, 60,\n  61, 54, 47,\n  55, 62,\n  63,\n]);\n\nconst dctCos1 = 4017; // cos(pi/16)\nconst dctSin1 = 799; // sin(pi/16)\nconst dctCos3 = 3406; // cos(3*pi/16)\nconst dctSin3 = 2276; // sin(3*pi/16)\nconst dctCos6 = 1567; // cos(6*pi/16)\nconst dctSin6 = 3784; // sin(6*pi/16)\nconst dctSqrt2 = 5793; // sqrt(2)\nconst dctSqrt1d2 = 2896;// sqrt(2) / 2\n\nfunction buildHuffmanTable(codeLengths, values) {\n  let k = 0;\n  const code = [];\n  let length = 16;\n  while (length > 0 && !codeLengths[length - 1]) {\n    --length;\n  }\n  code.push({ children: [], index: 0 });\n\n  let p = code[0];\n  let q;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < codeLengths[i]; j++) {\n      p = code.pop();\n      p.children[p.index] = values[k];\n      while (p.index > 0) {\n        p = code.pop();\n      }\n      p.index++;\n      code.push(p);\n      while (code.length <= i) {\n        code.push(q = { children: [], index: 0 });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n      k++;\n    }\n    if (i + 1 < length) {\n      // p here points to last code\n      code.push(q = { children: [], index: 0 });\n      p.children[p.index] = q.children;\n      p = q;\n    }\n  }\n  return code[0].children;\n}\n\nfunction decodeScan(data, initialOffset,\n  frame, components, resetInterval,\n  spectralStart, spectralEnd,\n  successivePrev, successive) {\n  const { mcusPerLine, progressive } = frame;\n\n  const startOffset = initialOffset;\n  let offset = initialOffset;\n  let bitsData = 0;\n  let bitsCount = 0;\n  function readBit() {\n    if (bitsCount > 0) {\n      bitsCount--;\n      return (bitsData >> bitsCount) & 1;\n    }\n    bitsData = data[offset++];\n    if (bitsData === 0xFF) {\n      const nextByte = data[offset++];\n      if (nextByte) {\n        throw new Error(`unexpected marker: ${((bitsData << 8) | nextByte).toString(16)}`);\n      }\n      // unstuff 0\n    }\n    bitsCount = 7;\n    return bitsData >>> 7;\n  }\n  function decodeHuffman(tree) {\n    let node = tree;\n    let bit;\n    while ((bit = readBit()) !== null) { // eslint-disable-line no-cond-assign\n      node = node[bit];\n      if (typeof node === 'number') {\n        return node;\n      }\n      if (typeof node !== 'object') {\n        throw new Error('invalid huffman sequence');\n      }\n    }\n    return null;\n  }\n  function receive(initialLength) {\n    let length = initialLength;\n    let n = 0;\n    while (length > 0) {\n      const bit = readBit();\n      if (bit === null) {\n        return undefined;\n      }\n      n = (n << 1) | bit;\n      --length;\n    }\n    return n;\n  }\n  function receiveAndExtend(length) {\n    const n = receive(length);\n    if (n >= 1 << (length - 1)) {\n      return n;\n    }\n    return n + (-1 << length) + 1;\n  }\n  function decodeBaseline(component, zz) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : receiveAndExtend(t);\n    component.pred += diff;\n    zz[0] = component.pred;\n    let k = 1;\n    while (k < 64) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          break;\n        }\n        k += 16;\n      } else {\n        k += r;\n        const z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n  }\n  function decodeDCFirst(component, zz) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n    component.pred += diff;\n    zz[0] = component.pred;\n  }\n  function decodeDCSuccessive(component, zz) {\n    zz[0] |= readBit() << successive;\n  }\n  let eobrun = 0;\n  function decodeACFirst(component, zz) {\n    if (eobrun > 0) {\n      eobrun--;\n      return;\n    }\n    let k = spectralStart;\n    const e = spectralEnd;\n    while (k <= e) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          eobrun = receive(r) + (1 << r) - 1;\n          break;\n        }\n        k += 16;\n      } else {\n        k += r;\n        const z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n  }\n  let successiveACState = 0;\n  let successiveACNextValue;\n  function decodeACSuccessive(component, zz) {\n    let k = spectralStart;\n    const e = spectralEnd;\n    let r = 0;\n    while (k <= e) {\n      const z = dctZigZag[k];\n      const direction = zz[z] < 0 ? -1 : 1;\n      switch (successiveACState) {\n        case 0: { // initial state\n          const rs = decodeHuffman(component.huffmanTableAC);\n          const s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw new Error('invalid ACn encoding');\n            }\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue; // eslint-disable-line no-continue\n        }\n        case 1: // skipping r zero items\n        case 2:\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          } else {\n            r--;\n            if (r === 0) {\n              successiveACState = successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        case 3: // set value for a zero item\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          } else {\n            zz[z] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          }\n          break;\n        default:\n          break;\n      }\n      k++;\n    }\n    if (successiveACState === 4) {\n      eobrun--;\n      if (eobrun === 0) {\n        successiveACState = 0;\n      }\n    }\n  }\n  function decodeMcu(component, decodeFunction, mcu, row, col) {\n    const mcuRow = (mcu / mcusPerLine) | 0;\n    const mcuCol = mcu % mcusPerLine;\n    const blockRow = (mcuRow * component.v) + row;\n    const blockCol = (mcuCol * component.h) + col;\n    decodeFunction(component, component.blocks[blockRow][blockCol]);\n  }\n  function decodeBlock(component, decodeFunction, mcu) {\n    const blockRow = (mcu / component.blocksPerLine) | 0;\n    const blockCol = mcu % component.blocksPerLine;\n    decodeFunction(component, component.blocks[blockRow][blockCol]);\n  }\n\n  const componentsLength = components.length;\n  let component;\n  let i;\n  let j;\n  let k;\n  let n;\n  let decodeFn;\n  if (progressive) {\n    if (spectralStart === 0) {\n      decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n    } else {\n      decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n  } else {\n    decodeFn = decodeBaseline;\n  }\n\n  let mcu = 0;\n  let marker;\n  let mcuExpected;\n  if (componentsLength === 1) {\n    mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n  } else {\n    mcuExpected = mcusPerLine * frame.mcusPerColumn;\n  }\n\n  const usedResetInterval = resetInterval || mcuExpected;\n\n  while (mcu < mcuExpected) {\n    // reset interval stuff\n    for (i = 0; i < componentsLength; i++) {\n      components[i].pred = 0;\n    }\n    eobrun = 0;\n\n    if (componentsLength === 1) {\n      component = components[0];\n      for (n = 0; n < usedResetInterval; n++) {\n        decodeBlock(component, decodeFn, mcu);\n        mcu++;\n      }\n    } else {\n      for (n = 0; n < usedResetInterval; n++) {\n        for (i = 0; i < componentsLength; i++) {\n          component = components[i];\n          const { h, v } = component;\n          for (j = 0; j < v; j++) {\n            for (k = 0; k < h; k++) {\n              decodeMcu(component, decodeFn, mcu, j, k);\n            }\n          }\n        }\n        mcu++;\n\n        // If we've reached our expected MCU's, stop decoding\n        if (mcu === mcuExpected) {\n          break;\n        }\n      }\n    }\n\n    // find marker\n    bitsCount = 0;\n    marker = (data[offset] << 8) | data[offset + 1];\n    if (marker < 0xFF00) {\n      throw new Error('marker was not found');\n    }\n\n    if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n      offset += 2;\n    } else {\n      break;\n    }\n  }\n\n  return offset - startOffset;\n}\n\nfunction buildComponentData(frame, component) {\n  const lines = [];\n  const { blocksPerLine, blocksPerColumn } = component;\n  const samplesPerLine = blocksPerLine << 3;\n  const R = new Int32Array(64);\n  const r = new Uint8Array(64);\n\n  // A port of poppler's IDCT method which in turn is taken from:\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n  //   988-991.\n  function quantizeAndInverse(zz, dataOut, dataIn) {\n    const qt = component.quantizationTable;\n    let v0;\n    let v1;\n    let v2;\n    let v3;\n    let v4;\n    let v5;\n    let v6;\n    let v7;\n    let t;\n    const p = dataIn;\n    let i;\n\n    // dequant\n    for (i = 0; i < 64; i++) {\n      p[i] = zz[i] * qt[i];\n    }\n\n    // inverse DCT on rows\n    for (i = 0; i < 8; ++i) {\n      const row = 8 * i;\n\n      // check for all-zero AC coefficients\n      if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0\n        && p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0\n        && p[7 + row] === 0) {\n        t = ((dctSqrt2 * p[0 + row]) + 512) >> 10;\n        p[0 + row] = t;\n        p[1 + row] = t;\n        p[2 + row] = t;\n        p[3 + row] = t;\n        p[4 + row] = t;\n        p[5 + row] = t;\n        p[6 + row] = t;\n        p[7 + row] = t;\n        continue; // eslint-disable-line no-continue\n      }\n\n      // stage 4\n      v0 = ((dctSqrt2 * p[0 + row]) + 128) >> 8;\n      v1 = ((dctSqrt2 * p[4 + row]) + 128) >> 8;\n      v2 = p[2 + row];\n      v3 = p[6 + row];\n      v4 = ((dctSqrt1d2 * (p[1 + row] - p[7 + row])) + 128) >> 8;\n      v7 = ((dctSqrt1d2 * (p[1 + row] + p[7 + row])) + 128) >> 8;\n      v5 = p[3 + row] << 4;\n      v6 = p[5 + row] << 4;\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = ((v2 * dctSin6) + (v3 * dctCos6) + 128) >> 8;\n      v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 128) >> 8;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;\n      v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;\n      v7 = t;\n      t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;\n      v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 + row] = v0 + v7;\n      p[7 + row] = v0 - v7;\n      p[1 + row] = v1 + v6;\n      p[6 + row] = v1 - v6;\n      p[2 + row] = v2 + v5;\n      p[5 + row] = v2 - v5;\n      p[3 + row] = v3 + v4;\n      p[4 + row] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (i = 0; i < 8; ++i) {\n      const col = i;\n\n      // check for all-zero AC coefficients\n      if (p[(1 * 8) + col] === 0 && p[(2 * 8) + col] === 0 && p[(3 * 8) + col] === 0\n        && p[(4 * 8) + col] === 0 && p[(5 * 8) + col] === 0 && p[(6 * 8) + col] === 0\n        && p[(7 * 8) + col] === 0) {\n        t = ((dctSqrt2 * dataIn[i + 0]) + 8192) >> 14;\n        p[(0 * 8) + col] = t;\n        p[(1 * 8) + col] = t;\n        p[(2 * 8) + col] = t;\n        p[(3 * 8) + col] = t;\n        p[(4 * 8) + col] = t;\n        p[(5 * 8) + col] = t;\n        p[(6 * 8) + col] = t;\n        p[(7 * 8) + col] = t;\n        continue; // eslint-disable-line no-continue\n      }\n\n      // stage 4\n      v0 = ((dctSqrt2 * p[(0 * 8) + col]) + 2048) >> 12;\n      v1 = ((dctSqrt2 * p[(4 * 8) + col]) + 2048) >> 12;\n      v2 = p[(2 * 8) + col];\n      v3 = p[(6 * 8) + col];\n      v4 = ((dctSqrt1d2 * (p[(1 * 8) + col] - p[(7 * 8) + col])) + 2048) >> 12;\n      v7 = ((dctSqrt1d2 * (p[(1 * 8) + col] + p[(7 * 8) + col])) + 2048) >> 12;\n      v5 = p[(3 * 8) + col];\n      v6 = p[(5 * 8) + col];\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = ((v2 * dctSin6) + (v3 * dctCos6) + 2048) >> 12;\n      v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 2048) >> 12;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;\n      v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;\n      v7 = t;\n      t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;\n      v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[(0 * 8) + col] = v0 + v7;\n      p[(7 * 8) + col] = v0 - v7;\n      p[(1 * 8) + col] = v1 + v6;\n      p[(6 * 8) + col] = v1 - v6;\n      p[(2 * 8) + col] = v2 + v5;\n      p[(5 * 8) + col] = v2 - v5;\n      p[(3 * 8) + col] = v3 + v4;\n      p[(4 * 8) + col] = v3 - v4;\n    }\n\n    // convert to 8-bit integers\n    for (i = 0; i < 64; ++i) {\n      const sample = 128 + ((p[i] + 8) >> 4);\n      if (sample < 0) {\n        dataOut[i] = 0;\n      } else if (sample > 0XFF) {\n        dataOut[i] = 0xFF;\n      } else {\n        dataOut[i] = sample;\n      }\n    }\n  }\n\n  for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n    const scanLine = blockRow << 3;\n    for (let i = 0; i < 8; i++) {\n      lines.push(new Uint8Array(samplesPerLine));\n    }\n    for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n      quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n\n      let offset = 0;\n      const sample = blockCol << 3;\n      for (let j = 0; j < 8; j++) {\n        const line = lines[scanLine + j];\n        for (let i = 0; i < 8; i++) {\n          line[sample + i] = r[offset++];\n        }\n      }\n    }\n  }\n  return lines;\n}\n\nclass JpegStreamReader {\n  constructor() {\n    this.jfif = null;\n    this.adobe = null;\n\n    this.quantizationTables = [];\n    this.huffmanTablesAC = [];\n    this.huffmanTablesDC = [];\n    this.resetFrames();\n  }\n\n  resetFrames() {\n    this.frames = [];\n  }\n\n  parse(data) {\n    let offset = 0;\n    // const { length } = data;\n    function readUint16() {\n      const value = (data[offset] << 8) | data[offset + 1];\n      offset += 2;\n      return value;\n    }\n    function readDataBlock() {\n      const length = readUint16();\n      const array = data.subarray(offset, offset + length - 2);\n      offset += array.length;\n      return array;\n    }\n    function prepareComponents(frame) {\n      let maxH = 0;\n      let maxV = 0;\n      let component;\n      let componentId;\n      for (componentId in frame.components) {\n        if (frame.components.hasOwnProperty(componentId)) {\n          component = frame.components[componentId];\n          if (maxH < component.h) {\n            maxH = component.h;\n          }\n          if (maxV < component.v) {\n            maxV = component.v;\n          }\n        }\n      }\n      const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n      const mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n      for (componentId in frame.components) {\n        if (frame.components.hasOwnProperty(componentId)) {\n          component = frame.components[componentId];\n          const blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n          const blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);\n          const blocksPerLineForMcu = mcusPerLine * component.h;\n          const blocksPerColumnForMcu = mcusPerColumn * component.v;\n          const blocks = [];\n          for (let i = 0; i < blocksPerColumnForMcu; i++) {\n            const row = [];\n            for (let j = 0; j < blocksPerLineForMcu; j++) {\n              row.push(new Int32Array(64));\n            }\n            blocks.push(row);\n          }\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n          component.blocks = blocks;\n        }\n      }\n      frame.maxH = maxH;\n      frame.maxV = maxV;\n      frame.mcusPerLine = mcusPerLine;\n      frame.mcusPerColumn = mcusPerColumn;\n    }\n\n    let fileMarker = readUint16();\n    if (fileMarker !== 0xFFD8) { // SOI (Start of Image)\n      throw new Error('SOI not found');\n    }\n\n    fileMarker = readUint16();\n    while (fileMarker !== 0xFFD9) { // EOI (End of image)\n      switch (fileMarker) {\n        case 0xFF00: break;\n        case 0xFFE0: // APP0 (Application Specific)\n        case 0xFFE1: // APP1\n        case 0xFFE2: // APP2\n        case 0xFFE3: // APP3\n        case 0xFFE4: // APP4\n        case 0xFFE5: // APP5\n        case 0xFFE6: // APP6\n        case 0xFFE7: // APP7\n        case 0xFFE8: // APP8\n        case 0xFFE9: // APP9\n        case 0xFFEA: // APP10\n        case 0xFFEB: // APP11\n        case 0xFFEC: // APP12\n        case 0xFFED: // APP13\n        case 0xFFEE: // APP14\n        case 0xFFEF: // APP15\n        case 0xFFFE: { // COM (Comment)\n          const appData = readDataBlock();\n\n          if (fileMarker === 0xFFE0) {\n            if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49\n              && appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n              this.jfif = {\n                version: { major: appData[5], minor: appData[6] },\n                densityUnits: appData[7],\n                xDensity: (appData[8] << 8) | appData[9],\n                yDensity: (appData[10] << 8) | appData[11],\n                thumbWidth: appData[12],\n                thumbHeight: appData[13],\n                thumbData: appData.subarray(14, 14 + (3 * appData[12] * appData[13])),\n              };\n            }\n          }\n          // TODO APP1 - Exif\n          if (fileMarker === 0xFFEE) {\n            if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F\n              && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n              this.adobe = {\n                version: appData[6],\n                flags0: (appData[7] << 8) | appData[8],\n                flags1: (appData[9] << 8) | appData[10],\n                transformCode: appData[11],\n              };\n            }\n          }\n          break;\n        }\n\n        case 0xFFDB: { // DQT (Define Quantization Tables)\n          const quantizationTablesLength = readUint16();\n          const quantizationTablesEnd = quantizationTablesLength + offset - 2;\n          while (offset < quantizationTablesEnd) {\n            const quantizationTableSpec = data[offset++];\n            const tableData = new Int32Array(64);\n            if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n              for (let j = 0; j < 64; j++) {\n                const z = dctZigZag[j];\n                tableData[z] = data[offset++];\n              }\n            } else if ((quantizationTableSpec >> 4) === 1) { // 16 bit\n              for (let j = 0; j < 64; j++) {\n                const z = dctZigZag[j];\n                tableData[z] = readUint16();\n              }\n            } else {\n              throw new Error('DQT: invalid table spec');\n            }\n            this.quantizationTables[quantizationTableSpec & 15] = tableData;\n          }\n          break;\n        }\n\n        case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n        case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n        case 0xFFC2: { // SOF2 (Start of Frame, Progressive DCT)\n          readUint16(); // skip data length\n          const frame = {\n            extended: (fileMarker === 0xFFC1),\n            progressive: (fileMarker === 0xFFC2),\n            precision: data[offset++],\n            scanLines: readUint16(),\n            samplesPerLine: readUint16(),\n            components: {},\n            componentsOrder: [],\n          };\n\n          const componentsCount = data[offset++];\n          let componentId;\n          // let maxH = 0;\n          // let maxV = 0;\n          for (let i = 0; i < componentsCount; i++) {\n            componentId = data[offset];\n            const h = data[offset + 1] >> 4;\n            const v = data[offset + 1] & 15;\n            const qId = data[offset + 2];\n            frame.componentsOrder.push(componentId);\n            frame.components[componentId] = {\n              h,\n              v,\n              quantizationIdx: qId,\n            };\n            offset += 3;\n          }\n          prepareComponents(frame);\n          this.frames.push(frame);\n          break;\n        }\n\n        case 0xFFC4: { // DHT (Define Huffman Tables)\n          const huffmanLength = readUint16();\n          for (let i = 2; i < huffmanLength;) {\n            const huffmanTableSpec = data[offset++];\n            const codeLengths = new Uint8Array(16);\n            let codeLengthSum = 0;\n            for (let j = 0; j < 16; j++, offset++) {\n              codeLengths[j] = data[offset];\n              codeLengthSum += codeLengths[j];\n            }\n            const huffmanValues = new Uint8Array(codeLengthSum);\n            for (let j = 0; j < codeLengthSum; j++, offset++) {\n              huffmanValues[j] = data[offset];\n            }\n            i += 17 + codeLengthSum;\n\n            if ((huffmanTableSpec >> 4) === 0) {\n              this.huffmanTablesDC[huffmanTableSpec & 15] = buildHuffmanTable(\n                codeLengths, huffmanValues,\n              );\n            } else {\n              this.huffmanTablesAC[huffmanTableSpec & 15] = buildHuffmanTable(\n                codeLengths, huffmanValues,\n              );\n            }\n          }\n          break;\n        }\n\n        case 0xFFDD: // DRI (Define Restart Interval)\n          readUint16(); // skip data length\n          this.resetInterval = readUint16();\n          break;\n\n        case 0xFFDA: { // SOS (Start of Scan)\n          readUint16(); // skip length\n          const selectorsCount = data[offset++];\n          const components = [];\n          const frame = this.frames[0];\n          for (let i = 0; i < selectorsCount; i++) {\n            const component = frame.components[data[offset++]];\n            const tableSpec = data[offset++];\n            component.huffmanTableDC = this.huffmanTablesDC[tableSpec >> 4];\n            component.huffmanTableAC = this.huffmanTablesAC[tableSpec & 15];\n            components.push(component);\n          }\n          const spectralStart = data[offset++];\n          const spectralEnd = data[offset++];\n          const successiveApproximation = data[offset++];\n          const processed = decodeScan(data, offset,\n            frame, components, this.resetInterval,\n            spectralStart, spectralEnd,\n            successiveApproximation >> 4, successiveApproximation & 15);\n          offset += processed;\n          break;\n        }\n\n        case 0xFFFF: // Fill bytes\n          if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n            offset--;\n          }\n          break;\n\n        default:\n          if (data[offset - 3] === 0xFF\n            && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n            // could be incorrect encoding -- last 0xFF byte of the previous\n            // block was eaten by the encoder\n            offset -= 3;\n            break;\n          }\n          throw new Error(`unknown JPEG marker ${fileMarker.toString(16)}`);\n      }\n      fileMarker = readUint16();\n    }\n  }\n\n  getResult() {\n    const { frames } = this;\n    if (this.frames.length === 0) {\n      throw new Error('no frames were decoded');\n    } else if (this.frames.length > 1) {\n      console.warn('more than one frame is not supported');\n    }\n\n    // set each frame's components quantization table\n    for (let i = 0; i < this.frames.length; i++) {\n      const cp = this.frames[i].components;\n      for (const j of Object.keys(cp)) {\n        cp[j].quantizationTable = this.quantizationTables[cp[j].quantizationIdx];\n        delete cp[j].quantizationIdx;\n      }\n    }\n\n    const frame = frames[0];\n    const { components, componentsOrder } = frame;\n    const outComponents = [];\n    const width = frame.samplesPerLine;\n    const height = frame.scanLines;\n\n    for (let i = 0; i < componentsOrder.length; i++) {\n      const component = components[componentsOrder[i]];\n      outComponents.push({\n        lines: buildComponentData(frame, component),\n        scaleX: component.h / frame.maxH,\n        scaleY: component.v / frame.maxV,\n      });\n    }\n\n    const out = new Uint8Array(width * height * outComponents.length);\n    let oi = 0;\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        for (let i = 0; i < outComponents.length; ++i) {\n          const component = outComponents[i];\n          out[oi] = component.lines[0 | y * component.scaleY][0 | x * component.scaleX];\n          ++oi;\n        }\n      }\n    }\n    return out;\n  }\n}\n\nexport default class JpegDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.reader = new JpegStreamReader();\n    if (fileDirectory.JPEGTables) {\n      this.reader.parse(fileDirectory.JPEGTables);\n    }\n  }\n\n  decodeBlock(buffer) {\n    this.reader.resetFrames();\n    this.reader.parse(new Uint8Array(buffer));\n    return this.reader.getResult().buffer;\n  }\n}\n"],"sourceRoot":""}